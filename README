Rook is a compiler/interpreter for a simple programming language.

Integration tests consist of sample rook programs, found under Rook.Test.Samples.

Parsing is performed via recursive descent, using monadic parsing combinators similar to the Parsec Haskell library.  In short, the LINQ 'from' and 'select' keywords are defined for a Parser<T> delegate type, allowing grammar rules to be specified and glued together as a series of queries.

For instance, grammar rules for If, Lambda, and collection literals are each defined as a LINQ statement:

        private static Parser<Expression> If
        {
            get
            {
                return from @if in Keyword("if")
                       from condition in Parenthesized(Expression).TerminatedBy(Optional(EndOfLine))
                       from bodyWhenTrue in Expression.TerminatedBy(Optional(EndOfLine))
                       from @else in Keyword("else").TerminatedBy(Optional(EndOfLine))
                       from bodyWhenFalse in Expression
                       select new If(@if.Position, condition, bodyWhenTrue, bodyWhenFalse);
            }
        }

        private static Parser<Expression> Lambda
        {
            get
            {
                return from fn in Keyword("fn")
                       from parameters in Tuple(Parameter)
                       from body in Expression
                       select new Lambda(fn.Position, parameters, body);
            }
        }

        private static Parser<Expression> VectorLiteral
        {
            get
            {
                return from items in Between("[", OneOrMore(Expression, Operator(",")), "]")
                       select new VectorLiteral(items.First().Position, items);
            }
        }